{"ast":null,"code":"import AWS from \"aws-sdk\";\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_DEFAULT_REGION\n});\nconst poolData = {\n  UserPoolId: process.env.AWS_USER_POOL_ID,\n  ClientId: process.env.AWS_CLIENT_ID\n};\nexport default function signUp(req, res) {\n  if (req.method !== 'POST') {\n    res.status(405).json({\n      error: \"Method not allowed\"\n    });\n  } else {\n    console.log('in api method');\n    const {\n      email,\n      password,\n      confirm_password,\n      js_enabled\n    } = req.body;\n\n    if (password !== confirm_password) {\n      res.status(404);\n      res.end(JSON.stringify({\n        error: \"Password does not match\"\n      }));\n    }\n\n    const emailData = {\n      Name: \"email\",\n      Value: email\n    };\n    let params = {\n      ClientId: poolData.ClientId,\n      Password: password,\n      Username: email,\n      UserAttributes: [emailData]\n    };\n    let CognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n    CognitoIdentityServiceProvider.signUp(params, (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n        res.status(404);\n        res.end(JSON.stringify({\n          error: err.message\n        }));\n      } else {\n        params = {\n          GroupName: 'User',\n          UserPoolId: process.env.AWS_USER_POOL_ID,\n          Username: email\n        };\n        CognitoIdentityServiceProvider.adminAddUserToGroup(params, (err, data) => {\n          if (err) {\n            console.log(err, err.stack);\n            res.status(404);\n            res.end(JSON.stringify(err.message));\n          } else {\n            res.status(201); //console.log(data);\n\n            if (parseInt(js_enabled)) {\n              console.log(\"js enabled\");\n              res.end(JSON.stringify({\n                message: \"success\"\n              }));\n            }\n\n            console.log('Js not enabled');\n            res.redirect('http://localhost:3000/signup-success');\n            return;\n          }\n        });\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/azlinayeo/repos/next-cognito-spike/pages/api/signup.js"],"names":["AWS","config","update","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","AWS_DEFAULT_REGION","poolData","UserPoolId","AWS_USER_POOL_ID","ClientId","AWS_CLIENT_ID","signUp","req","res","method","status","json","error","console","log","email","password","confirm_password","js_enabled","body","end","JSON","stringify","emailData","Name","Value","params","Password","Username","UserAttributes","CognitoIdentityServiceProvider","err","data","stack","message","GroupName","adminAddUserToGroup","parseInt","redirect"],"mappings":"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","sourcesContent":["import AWS from \"aws-sdk\";\n\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_DEFAULT_REGION,\n});\n\nconst poolData = {\n  UserPoolId:process.env.AWS_USER_POOL_ID,\n  ClientId:process.env.AWS_CLIENT_ID,\n};\n\nexport default function signUp(req, res) {\n    if (req.method !== 'POST') {\n        res.status(405).json({error: \"Method not allowed\"})\n    } else {\n        \n        console.log('in api method');\n        const { email, password, confirm_password, js_enabled} = req.body;\n  \n        if (password !== confirm_password) {\n            res.status(404);\n            res.end(JSON.stringify({error: \"Password does not match\"}))\n        }\n\n        const emailData = {\n            Name: \"email\",\n            Value: email\n        };\n\n        let params = {\n            ClientId: poolData.ClientId,\n            Password: password,\n            Username: email,\n            UserAttributes: [emailData]\n        };\n\n        let CognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n        CognitoIdentityServiceProvider.signUp(params, (err, data) => {\n            if (err) {\n                console.log(err, err.stack);\n                res.status(404);\n                res.end(JSON.stringify({error: err.message}))\n            }\n            else {\n\n                params = {\n                    GroupName: 'User',\n                    UserPoolId: process.env.AWS_USER_POOL_ID,\n                    Username: email,\n                }\n                CognitoIdentityServiceProvider.adminAddUserToGroup(params, (err, data) => {\n                    if (err) {\n                        console.log(err, err.stack);\n                        res.status(404);\n                        res.end(JSON.stringify(err.message))\n                    }\n                    else {\n                        res.status(201);\n                        //console.log(data);\n                        \n                        if (parseInt(js_enabled)) {\n                            console.log(\"js enabled\")\n                            res.end(JSON.stringify({message: \"success\"}));\n                        }\n                        console.log('Js not enabled')\n                        res.redirect('http://localhost:3000/signup-success');\n                        return;\n                        \n                    }\n                })\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}
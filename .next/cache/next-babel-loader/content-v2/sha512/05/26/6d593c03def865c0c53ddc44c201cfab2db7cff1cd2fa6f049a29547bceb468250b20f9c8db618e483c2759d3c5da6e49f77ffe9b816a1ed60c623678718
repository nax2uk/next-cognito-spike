{"ast":null,"code":"import { NextApiRequest, NextApiResponse } from 'next';\nimport AWS from \"aws-sdk\";\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_DEFAULT_REGION\n});\nconst poolData = {\n  UserPoolId: process.env.AWS_USER_POOL_ID,\n  ClientId: process.env.AWS_CLIENT_ID\n};\nexport default function signUp(req, res) {\n  if (req.method !== 'POST') {\n    res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  } else {\n    const {\n      email,\n      password,\n      confirm_password\n    } = req.body;\n\n    if (password !== confirm_password) {\n      return;\n    }\n\n    const emailData = {\n      Name: 'email',\n      Value: email\n    };\n    let params = {\n      ClientId: poolData.ClientId,\n      Password: password,\n      Username: email,\n      UserAttributes: [emailData]\n    };\n    let CognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n    CognitoIdentityServiceProvider.signUp(params, (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n      } else {\n        console.log(JSON.stringify(data));\n        params = {\n          GroupName: 'User',\n          UserPoolId: process.env.AWS_USER_POOL_ID,\n          Username: email\n        };\n        CognitoIdentityServiceProvider.adminAddUserToGroup(params, (err, data) => {\n          if (err) console.log(err, err.stack);else {\n            res.status(201);\n            res.end().console.log(data);\n            return;\n          }\n        });\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/azlinayeo/repos/next-cognito-spike/pages/api/signup.js"],"names":["NextApiRequest","NextApiResponse","AWS","config","update","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","AWS_DEFAULT_REGION","poolData","UserPoolId","AWS_USER_POOL_ID","ClientId","AWS_CLIENT_ID","signUp","req","res","method","status","json","message","email","password","confirm_password","body","emailData","Name","Value","params","Password","Username","UserAttributes","CognitoIdentityServiceProvider","err","data","console","log","stack","JSON","stringify","GroupName","adminAddUserToGroup","end"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,MAAhD;AACA,OAAOC,GAAP,MAAgB,SAAhB;AAEAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADT;AAEhBC,EAAAA,eAAe,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFb;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAMA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAACR,OAAO,CAACC,GAAR,CAAYQ,gBADR;AAEfC,EAAAA,QAAQ,EAACV,OAAO,CAACC,GAAR,CAAYU;AAFN,CAAjB;AAKA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACrC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACvBD,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB;AACH,GAFD,MAEO;AACH,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAwCR,GAAG,CAACS,IAAlD;;AAEA,QAAIF,QAAQ,KAAKC,gBAAjB,EAAmC;AAC/B;AACH;;AAED,UAAME,SAAS,GAAG;AACdC,MAAAA,IAAI,EAAE,OADQ;AAEdC,MAAAA,KAAK,EAAEN;AAFO,KAAlB;AAKA,QAAIO,MAAM,GAAG;AACThB,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QADV;AAETiB,MAAAA,QAAQ,EAAEP,QAFD;AAGTQ,MAAAA,QAAQ,EAAET,KAHD;AAITU,MAAAA,cAAc,EAAE,CAACN,SAAD;AAJP,KAAb;AAOA,QAAIO,8BAA8B,GAAG,IAAIlC,GAAG,CAACkC,8BAAR,EAArC;AACAA,IAAAA,8BAA8B,CAAClB,MAA/B,CAAsCc,MAAtC,EAA8C,CAACK,GAAD,EAAMC,IAAN,KAAe;AACzD,UAAID,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBA,GAAG,CAACI,KAArB;AACH,OAFD,MAGK;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAZ;AAEAN,QAAAA,MAAM,GAAG;AACLY,UAAAA,SAAS,EAAE,MADN;AAEL9B,UAAAA,UAAU,EAAER,OAAO,CAACC,GAAR,CAAYQ,gBAFnB;AAGLmB,UAAAA,QAAQ,EAAET;AAHL,SAAT;AAKAW,QAAAA,8BAA8B,CAACS,mBAA/B,CAAmDb,MAAnD,EAA2D,CAACK,GAAD,EAAMC,IAAN,KAAe;AACtE,cAAID,GAAJ,EAASE,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBA,GAAG,CAACI,KAArB,EAAT,KACK;AACDrB,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;AACAF,YAAAA,GAAG,CAAC0B,GAAJ,GACAP,OADA,CACQC,GADR,CACYF,IADZ;AAEA;AACH;AACR,SARG;AASH;AACJ,KAtBD;AAuBH;AAGJ","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport AWS from \"aws-sdk\";\n\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_DEFAULT_REGION,\n});\n\nconst poolData = {\n  UserPoolId:process.env.AWS_USER_POOL_ID,\n  ClientId:process.env.AWS_CLIENT_ID,\n};\n\nexport default function signUp(req, res) {\n    if (req.method !== 'POST') {\n        res.status(405).json({message: \"Method not allowed\"})\n    } else {\n        const { email, password, confirm_password } = req.body;\n  \n        if (password !== confirm_password) {\n            return\n        }\n\n        const emailData = {\n            Name: 'email',\n            Value: email\n        };\n\n        let params = {\n            ClientId: poolData.ClientId,\n            Password: password,\n            Username: email,\n            UserAttributes: [emailData]\n        };\n\n        let CognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n        CognitoIdentityServiceProvider.signUp(params, (err, data) => {\n            if (err) {\n                console.log(err, err.stack);\n            }\n            else {\n                console.log(JSON.stringify(data));\n\n                params = {\n                    GroupName: 'User',\n                    UserPoolId: process.env.AWS_USER_POOL_ID,\n                    Username: email,\n                }\n                CognitoIdentityServiceProvider.adminAddUserToGroup(params, (err, data) => {\n                    if (err) console.log(err, err.stack);\n                    else {\n                        res.status(201);\n                        res.end().\n                        console.log(data);\n                        return;\n                    }\n            })\n            }\n        });\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}